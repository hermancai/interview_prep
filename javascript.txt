--What is a closure?
  Combo of a function and the lexical environment in which that function was declared.
  Ex: A function creates a local variable and a nested function, which uses that local
    variable. It then returns the nested function. When that nested function is called 
    later, it retains access to the local variable, which should normally be 
    inaccessible after the initial function returned. The nested function is a closure, 
    and that local variable is within the function's lexical environment.

--Is Javascript block-scoped or function-scoped?
  It can be both due to hoisting of variables declared with var.
  Use let/const for block scoping.

--Is Javascript a compiled or interpreted language?
  Javascript was originally interpreted with browsers in mind.
  It can now also be compiled (e.g. JIT-compiler) depending on the environment. 

--Is Javascript dynamic or static? Is it strongly or weakly typed?
  Javascript is dynamic and weakly typed.
  Dynamic: Types are checked at run time.
  Static: Types are checked at compile time.
  Strongly typed: Pointers cannot be reassigned to values of different type.
  Weakly typed: Pointers can be reassigned to values of different type.
  Javascript allows type coercion because the language is weakly typed.
  Ex: let a = "str";  a = 9;  // this is allowed in Javascript

--Describe the Javascript thread and call stack.
  Javascript is synchronous and single-threaded, with asynchronous capabilities. 
  There is a single sequential flow of control.
  A thread has a call stack and memory.
  A call stack keeps track of functions and manages the execution context. 
  The bottom of the call stack is the global execution context. Functions are stacked on top.
  The call stack works the same way as the data structure. Called functions get 
    called and pushed onto the stack, then get popped when finished. 

--Describe the execution context.
  An environment that is created when running Javascript to handle the transformation 
    and execution of code. Contains currently running code and everything that aids its execution. 
  There is global execution context and function execution context (for every function called).
  When context is created, there is a variable environment in memory, which holds all 
    variables and functions as key value pairs. There is also the execution, which 
    goes through the code line by line to execute it. 
  When creating context, there are two phases: memory creation and execution. 
    Basically, the code is parsed twice for different purposes.
    Memory creation: Create global object (browser = window, nodejs = global). 
      Create 'this' object and binds to global object. 
      Sets up memory heap and stores variables and function references. 
        Entire functions are stored, but variables are set as undefined. 
        This is how hoisting works under the hood. 

--Describe asynchronous Javascript, the task queue, and the event loop.
  Asynchronous functions can register a callback, which is placed into the task queue. 
    The queue works the same way as the data structure. 
  The event loop will continuously run to pop callbacks from the queue and push 
    them onto the call stack for execution. Execution occurs on each tick of the event loop. 
  The microtask queue handles Promise callbacks and has higher priority than 
    the normal task queue. Callbacks here do not have to wait for the event loop 
    to finish its current iteration/tick. 

--What is hoisting?
  Function hoisting: A function can be called before it is declared.
  Variable hoisting: A variable can be used before it is declared and/or initialized.
    Declaration: var num;
    Initialization: num = 6;
    NOTE: The declaration will be hoisted but not initialization, so num is undefined.
    If the variable is not even declared, there will be a ReferenceError instead. 
    Let and const declarations are also hoisted, but there is no default (i.e. undefined) 
      initialization like var.
    NOTE: The order of code execution matters, not the order of written source code. 

--What is type coercion?
  When data/object is forced into a different type.
  Ex: 1 == true, 0 == false
  Ex: "hello" + 99 == "hello99"
  Ex: "hello" == true
  Ex: a = [0, 1, 2, 3]; a[0] == false; // This is probably unwanted behavior.

--What is the difference between == and ===?
  Type coercion does not occur for === (strict equality).
  Ex: 1 == true   // returns true
      1 === true  // returns false

--What is the difference between call, apply, and bind?
  Call and apply modify the context (i.e. this) of a function then run the function immediately.
  Bind does the same thing except the function can be called later. 
  Call takes arguments one by one, while apply takes a list of arguments.
  Example:
    const john = { food: "pizza" };
    const getFood = function(action1, action2) {
      console.log("Eat" + this.food + " then " + action1 + " and " + action2);
    }
    getFood.call(john, "run", "sleep");
    getFood.apply(john, ["run", "sleep"]);
    const functionForLater = getFood.bind(john);
    functionForLater("run", "sleep");

--What is object serialization and deserialization?
  Serialization: Converting an object into a suitable format for network transfer or storage.
    Ex: JSON.stringify(obj)
  Deserialization: Converting a lower-level format into a readable object.
    Ex: JSON.parse(objString)

--What is a mixin?
  In Javascript, there can only be one prototype for an object and a class can only extend from one class.
  A mixin is a class with methods can other classes can use without inheriting from it.
  Example:
    let mixin = {
      sayHi() {
        alert("Hello");
      }
    };

    class User = {
      constructor(name) {
        this.name = name;
      }
    }

    Object.assign(User.prototype, mixin);
    new User("Joe").sayHi(); // Hello

--What is tree shaking?
  Removal of dead code. Uses the import and export statements in ES2015 to check if 
    code modules are used between Javascript files.
  Module bundlers (e.g. webpack) automatically tree shake when bundling multiple files into one.

--What is reflection?
  Concept that an object can look at its own properties and methods.
  Ex: Object.hasOwnProperty("key");

--What is ES6?
  ECMAScript is a blueprint/set of standards for creating a scripting language.
  Javascript is an implementation of ECMAScript.
  ES6 is also called ES2015 or officially ECMAScript 2015.
  It introduces arrow functions, destructuring, etc. 
  https://babeljs.io/docs/en/learn/ 

--What is CommonJS?
  It is a module formatting system for organizing Javascript code. 
  It is the default in Node.js (e.g. require('module')).
  Newer versions of Node now support ES modules (i.e. import Obj from 'module').

--What is window, screen, and document?
  window is the execution context and global object for that context's Javascript.
    window properties include document, screen, location, history, navigator, etc
    Each browser tab and iframe has its own window.
  screen (i.e. window.screen or screen) is a object containing info about physical screen dimensions.
  document (i.e. window.document or document) is the main object to be rendered (i.e. the DOM).

--What is an iframe?
  It is an HTML element used to embed a document within the current document.
  Useful for videos, ads, etc.

--Compare host objects and native objects.
  Native: objects in ECMAScript that are fully defined by the ECMA specifications rather 
    than the host environment. Native objects can be built-in or constructed. 
    Ex: Object, Date, Math, eval, indexOf, replace, etc
  Host: objects provided by the host environment (e.g. browser, server)
    Ex: window, document, location, history, XMLHttpRequest, setTimeout, getElementsByTagName

--Compare event bubbling and event capturing.
  Both are ways for events to propagate in a DOM.
  Given a nested group of elements div -> ul -> li and li gets a click event:
  Bubbling: Events will execute starting with li and move outwards to ul then div.
  Capturing: Events will execute starting with div and move inwards to ul then li.

--What is the temporal dead zone?
  Variables declared with let/const are block-scoped. They are hoisted, but they cannot 
    be accessed until they are initialized. They will throw a ReferenceError while 
    variables declared with var will return undefined.

--What is a Symbol?
  A built-in primitive object that is guaranteed to be unique. Useful for adding property keys 
    to an object to prevent collision. 

--What is a WeakMap?
  A built-in map where keys must be objects. Values can be any type. Strong references are not 
    created to the keys i.e. a key object can be garbage collected. After collection, the key's 
    value is also open for collection as long as it is not strongly referred elsewhere.

--What is a callback?
  A function passed as an argument to another function, so that it can be called later.
  Used frequently for asynchronous code. 
  Context changes in callbacks, so call/apply is needed if 'this' will be referenced.

--What is a thunk?
  A function, returned by another function, that will be used to perform work later.
  In Redux, thunks are a pattern of writing functions that will interact with 
    the store's dispatch() and getState().

--What is the event loop?
  Javascript's runtime model is based on the event loop, which executes code, collects/processes 
    events, and executes queued sub-tasks.
  The event loop is usually implemented as a queue that waits for messages. Each message is processed 
    completely before the next message. In the browser, messages are added every time an event 
    fires and there is a listener attached.
  The event loop does not block. Exceptions include alert and synchronous XHRs. Avoid using these.

--What is a race condition?
  When a system attempts two operations on one subject at the same time, the outcome may be uncertain.
    It depends on the system (e.g. multi-threading).
  Javascript is single-threaded. When two async functions are run at the same time, they enter the heap.
    The heap in this context is a mostly unstructured region of memory.
    While in the heap, it is uncertain which function will be given to the waiting queue. 
    However, when the functions enter the queue, they will be executed one at a time. 
    It can be argued that Javascript does not have race conditions.

--What is the output of console.log(+ "hello"); ?
  NaN. + is the unary plus operator. It converts the following operand into a number, which fails in this case.
  console.log(+ "4");   // 4
  console.log(+ true);  // 1
  console.log(+ false); // 0

--What is the output of 3 instanceof Number; ?
  false. 3 is a primitive number while Number is a primitive wrapper object used to represent numbers.
  console.log(typeof 3)  // number
  console.log(typeof Number)  // function

--Compare array literals and condensed arrays.
  Literal: let li = [1, 2, 3]
    let x = [1, 2, 3]  // [1, 2, 3]
    let x = [1, , 3]  // [1, undefined, 3]
  Condensed: let li = new Array(1, 2, 3)
    If there is only one argument and it is an int, array will be an empty list of given length.
    let x = new Array(3)  // [<3 empty slots>]
    let x = new Array(1, 2, 3)  // [1, 2, 3]
    let x = new Array(1, , 3)  // SyntaxError
    let x = new Array("hi")  // ["hi"]

--What is currying?
  A function that takes one argument and returns a function that expects the next argument.
    Ex: f(a, b, c) -> curry -> f(a)(b)(c)
  Divides original function into multiple smaller functions that handle one responsibility.
  Ex:
    const curry = (a) => {
      return (b) => {
        return (c) => {
          return a + b + c;
        }
      }
    }
    const addOne = curry(1);  // addOne is a function that adds 1
    console.log(addOne(4)(5))  // 10

    const addThree = curry(1)(2);  // addThree is a function that adds 3
    console.log(addThree(50))  // 53

--Compare null and undefined.
  null: a primitive value representing the absence of an object value.
    console.log(typeof null);  // object
  undefined: a primitive value and a variable in global scope.
    Default value when a var has been declared but not assigned a value.
    console.log(typeof undefined);  // undefined
  undefined === null;  // false
  undefined == null;  // true
  null === null;  // true
  undefined === undefined;  // true

--Compare var, const, let.
  var: Function scoped. 
    Can be redeclared and updated.
  let: Block scoped (i.e. anything within {}). 
    Can be updated but not redeclared, unless it is in a different scope.
  const: Block scoped.
    Cannot be updated or redeclared.
    const objects cannot be updated, but their properties can. 

--What is a prototype?
  Prototypes are how Javascript objects inherit features. 
  Every object has a built-in property __proto__, which is that object's prototype.
  The prototype itself is an object, meaning it has a __proto__ property as well. 
    console.log(Object.prototype);
    Contains these functions: constructor, hasOwnProperty, isPrototypeOf, propertyIsEnumerable, 
      toLocaleString, toString, valueOf.
    Also contains __proto__ with a value of null.
  A prototype chain can be created, which will end with Object.prototype's own prototype of null.
    Ex: const myDate = new Date();
      Chain: myDate -> Date.prototype -> Object.prototype
  When calling an object's function, the function will be searched for in the object's properties.
    If not found, prototypes will be searched up the chain. If not found, return undefined.
  Shadowing properties: overriding a prototype property by defining it with the same name in the current object.
  Setting prototypes: Object.create(customPrototype); or using the prototype/constructor property
    https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes#setting_a_prototype

--What is a Promise?
  Object that represents the eventual success/failure of an async operation and its result.
  A Promise has 3 states: pending, fulfilled, rejected.
  The Promise.then() and .catch() methods return Promises, so it can be chained.
  then() takes two arguments: callback functions to handle resolve and reject.
  catch() takes a function to handle rejections.
  Promise.all(iterable) waits for all given promises to be resolves or any to be rejected.

--What is Node and Express?
  Node: A cross-platform back-end Javascript runtime environment that executes Javascript 
    code outside a web browser.
  Express: A back-end web framework for Node.

--How does JIT (just in time) compilation work for Javascript?
  The browser runs the interpreted language. The JIT compiler translates each line to machine code and 
  executes the code normally. If lines are run repeatedly (e.g. loop), the lines are flagged as warm/hot.
  Warm code is sent to be compiled and indexed. If that code gets repeated later on, the compiled version 
  will be used instead. Optimizations include skipping type checks. If type assumption turns out wrong 
  since Javascript is dynamically typed, the compiler will throw away the compiled version and 
  revert to the base code (deoptimization). This can result in even slower performance. 

--What is Babel?
  A transpiler that converts newer Javascript into backwards compatible Javascript for older browsers.
  Ex: ES2020 Javascript is not currently supported by all browsers, so Babel can translate it.

--Basic DOM manipulation functions
  const body = document.body
  body.append("Hello", "Bye");  // does same thing as appendChild() except more versatile
  body.appendChild();  // only accepts nodes

  const div = document.createElement("div");
  div.setAttribute("id", "divID"));  // can also directly access i.e. div.id = "divID";
  div.getAttribute("id");
  div.removeAttribute("id"); 
  console.log(div.dataset);  // displays all data attributes in element 
  div.classList.add("newClass");
  div.classList.remove("newClass");
  div.classList.toggle("newClass");  // adds or removes class depending on if it's already in
  div.classList.toggle("otherClass", true);  // adds or removes based on boolean
  div.style.backgroundColor = "red";
  body.append(div);
  div.remove();  // also see removeChild()

--Basic DOM traversal functions
  document.getElementById("elementId");
  Array.from(document.getElementsByClassName("elementId"));
  document.querySelector("#elementId");  // gets first matching element
  document.querySelectorAll(".elementClass");  // returns list
    Also works using an element instead of "document."
  Array.from(document.getElementById("elementId").children);  // list of element's children
  document.getElementById("elementId").parentElement; 
  document.getElementById("elementId").closest(".parentElement"); // like querySelector but upwards
  document.getElementById("elementId").nextElementSibling;
    Also previousElementSibling

--Basic array methods
  list.filter((val) => val > 10);  // Returns new array with items that match the conditions
  list.map((val) => val * 10);  // Returns new array after performing operations per item
  list.find((val) => val === 10);  // Returns first item that matches
  list.forEach((val) => console.log(val));  // Performs operation on every item
  list.some((val) => val > 10);  // Returns true if any item matches
  list.every((val) => val > 10);  // Returns true if every item matches
  list.reduce((currentTotal, val) => {
    return val + currentTotal;
  }, 0);  // currentTotal is updated per item, with a given initial value of 0
  list.includes(10);  // Returns true if list has item
