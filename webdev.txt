--What is the DOM?
  Document Object Model. Representation of the elements that make up a web page.
  Elements are organized as a tree of nodes.
  
--Compare textContent, innerText, innerHTML.
  textContent: the text in an HTML element and its descendants
    Returns every element in the node, including hidden, scripts, style.
    Removes child nodes when altered.
  innerText: similar to textContent, except:
    Aware of CSS so reading innerText triggers a reflow (avoid this).
      Ex: if text is styled with display: none, that text will not be returned.
    Supports browsers older than IE8.
  innerHTML: HTML of an element.
    Don't use this unless inserting safe HTML into an element.
    Use textContent to get text so it does not need HTML parsing.
  createTextNode: this is for making a new element, not altering an existing element.

--Compare visibility:hidden and display:none.
  Hidden: The element is rendered and space is allocated for it on the page, but it is not seen.
  None: The element is not on the page. It can be accessed using the DOM.

--What are data attributes in HTML?
  Any attribute of an HTML element that begins with "data-".
  Can access all data attributes in an element using the dataset property.
  Ex: <div data-columns="3" />  console.log(divElement.dataset.columns); // 3

--What is the difference between encrypting and hashing?
  Encrypted data can later be decrypted.
  Hashing cannot be undone. The hashing process, given an input, should always give the same output, 
    and outputs should never be the same for two different inputs. 

--What is progressive enhancement and graceful degradation?
  Progressive enhancement: Starting development with a baseline of old browsers. 
    Apply advanced features when a browser can support it.
  Graceful degradation: Start with the newest browsers.
    For old browsers that cannot support newer features, maintain basic functionality. 

--What is fault tolerance?
  A system's ability to continue operating despite failure of one or more components.
  Ex: If an HTML file is missing a closing tag or css uses non-existant properties, 
    the browser will still attempt to render the page without crashing.
  https://dev.to/jfbrennan/fault-tolerance-on-the-web-3lb0

--What is hydration?
  When client-side Javascript converts a static HTML page into a dynamic page by attaching event 
    handlers to the HTML elements. This allows a fast first contentful paint (when useful data 
    is first shown to the user). The page will appear fully loaded but is not actually until 
    the Javascript has completed.

--What is repaint and reflow?
  Reflow: Recalculating element positions to re-render the page.
    Due to changing window size, element sizes, font size, etc.
    An expensive process and should be avoided.
  Repaint: Occurs when an element's appearance is changed. (e.g. background color, visibility)

--In test driven development, what is spy, stub, and mock?
  Spy: Used to get info about function calls (e.g. how many times a function was called)
  Stub: Function to replace another function. For getting sample data or specific response.
  Mock: Similar to stub but for entire objects.

--What are memory leaks?
  Memory that is not required anymore but the system is not releasing that memory.
  Main cause of leaks in Javascript is unwanted references (e.g. globals, DOM elements).

--What are ways to deal with malicious actors?
  Rating limiting, captchas, nonce ("number used once", i.e. single use tokens), 
  banning bad ASNs (Autonomous System Number, used to control routing within a network 
  and communicate with other ISPs).

--What is DRY and SOLID?
  DRY: Don't Repeat Yourself. Principle of reducing repeated software patterns.
    "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system."
    Changing an element of a system does not require a change in other logically unrelated elements.
    Logically related elements change in a predictable and uniform way.
  SOLID: 5 design principles for OOP
    Single responsiblity: Every class should only have one responsibility.
    Open-closed: An element's behavior can be extended, without modifying source code (i.e. inheritance).
      Open: Module can be extended by adding properties to it.
      Closed: Module can be used by other modules since it is well-defined and stable.
    Liskov substitution: A class and subclass should be interchangable without breaking the program.
      "Functions that use pointers to base classes must be able to use derived classes without knowing it."
    Interface segregation: Many specific interfaces is better than one general purpose interface.
      Code should not be forced to depend on methods that the code does not use.
    Dependency inversion: Both high and low level modules should depend on abstractions, instead of the 
      high level depending directly on the low level. 
      The abstractions (interfaces) expose the behavior needed by the high level. 
      The abstracts are owned by the high level and the low levels are created by implementation of the abstracts.
      This increases reusability of high level modules, and they can use other implementations of low level modules.

--What is MVC?
  Model-View-Controller. A software design pattern for separation of concerns.
  Model: manages data and business logic (i.e. data structure)
  View: manages layout and design (i.e. UI)
  Controller: manages routing commands to the model and view (i.e. control logic)
  User makes change -> View sends input to Controller -> Controller manipulates Model -> Model sends updated state to View

--What is serverless computing?
  When the server is managed by a third-party cloud provider, instead of on-site. This saves time and money 
  that would otherwise be needed to take care of the server. Serverless is more scalable - as the server handles 
  more users, the infrastructure can change to match demand.
  Disadvantages: Serverless loses control and visibility, since a third-party manages the server.

--Compare server side rendering (SSR) and static generation (SSG).
  SSR: The server pre-renders a page to HTML on every request. This means the server will take longer to 
    respond to a request, but data will always be up-to-date.
  SSG: HTML files are created before requests, such as at build time. Performance is better, 
    but data can become stale.
  There are ways to mix methods and maximize performance.
    Incremental SSG: Add/update static pre-rendered pages after build time.
    Client-side fetching: Statically generate parts of a page that don't need data, then fetch data client-side.

--What is a content delivery network (CDN)?
  A geographically distributed group of servers that work together to serve content quickly.
  A majority of web traffic is served through CDNs, including traffic from major sites (e.g. Netflix, Amazon).
  CDNs can cache content on the network edge (close to user devices).
  Benefits: better load times, reduced bandwidth costs, increased content availability, better security.
  
--What is CORS?
  Cross-Origin Resource Sharing. A server can decide which origins (domain, scheme, port) other than its own 
    that a browser permits loading resources from. Permissions are contained in HTTP headers. When loading from 
    a cross-origin source, the browser will also make a "preflight" request to the that server to check 
    if the request will be allowed.
  